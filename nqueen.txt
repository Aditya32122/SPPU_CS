public class NQueens {

    // Main method to solve the N-Queens problem
    public static void main(String[] args) {
        int n = 4;  // Set the size of the board (4x4 board for 4 queens)
        solveNQueens(n);
    }

    // Solve the N-Queens problem and print one solution
    public static void solveNQueens(int n) {
        char[][] board = new char[n][n];
        
        // Initialize the board with empty spaces ('.')
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = '.';
            }
        }

        // Start placing queens from the first row
        if (placeQueens(board, 0)) {
            printBoard(board);
        } else {
            System.out.println("No solution exists for " + n + " queens.");
        }
    }

    // Recursive function to place queens
    private static boolean placeQueens(char[][] board, int row) {
        int n = board.length;
        
        // If all rows are filled, a solution is found
        if (row == n) {
            return true;
        }

        // Try placing a queen in each column for this row
        for (int col = 0; col < n; col++) {
            if (isSafe(board, row, col)) {
                board[row][col] = 'Q';  // Place the queen

                // Recur to place the queen in the next row
                if (placeQueens(board, row + 1)) {
                    return true;  // If successful, stop further placement
                }

                board[row][col] = '.';  // Backtrack: remove the queen
            }
        }
        return false;  // No solution found for this row
    }

    // Check if it's safe to place a queen at board[row][col]
    private static boolean isSafe(char[][] board, int row, int col) {
        int n = board.length;

        // Check column for another queen
        for (int i = 0; i < row; i++) {
            if (board[i][col] == 'Q') return false;
        }

        // Check upper-left diagonal
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') return false;
        }

        // Check upper-right diagonal
        for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {
            if (board[i][j] == 'Q') return false;
        }

        return true;  // Safe to place a queen
    }

    // Print the board configuration
    private static void printBoard(char[][] board) {
        for (char[] row : board) {
            for (char cell : row) {
                System.out.print(cell + " ");
            }
            System.out.println();
        }
    }
}